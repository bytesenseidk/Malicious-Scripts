- Injection flaws occur because user controlled input is interpreted as actual commands or parameters by the application.
- Injection attacks depend on what technologies are being used and how exactly the input is interpreted by these technologies.

- Common injection types:
    - SQL Injection: 
        - When user controlled input is passed to SQL queries.
        - This enables an attacker to pass in SQL queries to manipulate the outcome of such queries.

    - Command Injection: 
        - When user input is passed to system commands. 
        - This enables an attacker is able to execute arbitrary system commands on application servers.


- A successful injection attack would enable:
    - Access, Modify and Delete data in a database when the input is passed into database queries.
        - This enables an attacker to steal sensitive information like personal details and credentials.
    
    - Execute arbitrary system command on a server that would allow an attacker to gain access to a users system.
        - This would enable the attacker to steal sensitive data and carry out more attacks agains infrastructure 
          linked to the server on which the command is executed.


- How to prevent Injection Attacks (Input Sanitization):
    - Ensuring that user controlled input is not interpreted as queries or commands:
        - Allow List: 
            - When input is sent to the server, the input is compared to a list of safe input or characters.
            - If the input is marked as safe, then it is processed.
            - Else, it is rejected and the application throws an error.
        
        - Stripping Input:
            - If input contains dangerous characters, these characters are removed before they are passed.
        

- Command Injection:
    - 