- XML (eXtensible Markup Language):
    - This is a markup language that defines a set of rules for encoding documents in a format 
      that is both human-readable and machine-readable.

    - It is a markup language used for storing and transporting data.
    - It is platform-independent and programming language independent.
    - Data which is stored and transported using XML can be changed at any point in time without affecting the data presentation.
    - XML allows validation using DTD and Schema. This validation ensures that the XML document is free from any syntax errors.
    - It simplifies data sharing between various systems because of its platform-independent nature. XML data doesn't require any 
      conversion when transferred between different systems.
    
    - Document Type Defination (DTD):
        - DTD defines the structure, and the legal elements and attributes of an XML document.
        - DTD File Example (check.dtd):
            - <!DOCTYPE check [ <!ELEMENT check (to,from,heading,body)> <!ELEMENT to (#PCDATA)> <!ELEMENT 
              from (#PCDATA)> <!ELEMENT heading (#PCDATA)> <!ELEMENT body (#PCDATA)> ]>
        
        - Usage in XML document:
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE check SYSTEM "check.dtd">
            <check>
                <to>Karate Kid</to>
                <from>Mr. Miyaki</from>
                <heading>Hacking</heading>
                <body>XXE</body>
            </check>
        
        - DTD Elements:
            - !DOCTYPE check: Defines a root element of the document named check.
            - !ELEMENT check: Defines that the check element must contain the elements [to,from,heading,body]
            - !ELEMENT [to, from, heading, body]: Defines the element to be of type "#PCDATA"
                * #PCDATA means Parseable Character Data.


- XML External Entity (XXE):
    - This attack is a vulnerability that abuses features of XML parsers/data.

    - It often allows an attacker to interact with any backend or external systems that the application 
      itself can access and allow the attacker to read the files on the system.

    - This can also cause a DOS attack or could use XXE to perform Server-Side Request Forgery (SSRF) 
      inducing the web application to make requests to other applications.

    - XXE may also enable port scanning and lead to remote code execution.

    - Types of XXE attacks:
        - In-Band XXE: The attacker can receive an immediate response to the XXE payload.

        - Out-Of-Band XXE (Blind XXE): No immediate response from the web application and the attacker 
          has to reflect the output of their XXE payload to some other file, or their own server. 

    - XEE Example:
        <?xml version="1.0"?>
        <!DOCTYPE root [<!ENTITY passwd SYSTEM 'file:///etc/passwd'>]>
        <root>&passwd;</root>

    - XEE Elements:
        - !ENTITY passwd: Defining an entity called passwd.
        - !ENTITY passwd SYSTEM: Setting it's value to SYSTEM and path to the file.
        - <root>&passwd;</root>: Displays the content of the entity passwd which is the value of the "/etc/passwd" file.
    
